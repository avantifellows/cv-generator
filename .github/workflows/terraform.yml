name: 'Terraform Infrastructure'

on:
  push:
    branches: [ "new-feature-branch" ]
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read

env:
  TF_VERSION: "1.10.5"
  AWS_REGION: "ap-south-1"
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Prevent hanging workflows
    
    # Working directory for all terraform commands
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Setup Terraform with specified version
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Initialize Terraform with S3 backend
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.S3_BACKEND_BUCKET }}" \
          -backend-config="dynamodb_table=${{ secrets.DYNAMODB_LOCK_TABLE }}" \
          -backend-config="region=${{ env.AWS_REGION }}"
      env:
        TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
        TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}

    # Validate Terraform configuration
    - name: Terraform Validate
      run: terraform validate

    # Check Terraform formatting
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    # Check for stale locks and clear if needed
    - name: Check State Lock Status
      run: |
        echo "Checking for potential state locks..."
        if ! terraform plan -input=false -lock-timeout=30s >/dev/null 2>&1; then
          echo "⚠️ State appears to be locked. This might be a stale lock from a previous run."
          echo "Attempting to diagnose the issue..."
          # Don't auto-unlock in CI for safety, just report the issue
          echo "If this persists, a manual 'terraform force-unlock' may be needed."
          exit 1
        fi
        echo "✅ State lock check passed"
      env:
        TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
        TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}

    # Generate Terraform plan
    - name: Terraform Plan
      run: terraform plan -input=false -lock-timeout=5m
      env:
        TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
        TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}

    # Apply Terraform changes
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -lock-timeout=5m
      env:
        TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
        TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }} 